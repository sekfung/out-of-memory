// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-04-25 16:58:26.366423 +0800 CST m=+0.066407159

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "info": {
        "contact": {},
        "license": {}
    },
    "paths": {
        "/api/v1/articles": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Article"
                ],
                "summary": "Add Article",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Title, limit 50 character",
                        "name": "Title",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Content, not allow to be empty",
                        "name": "Content",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "array",
                        "description": "Tags",
                        "name": "Tags",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Category",
                        "name": "Category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Article type, [md, doc], default value: md",
                        "name": "Type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Article State, [deleted, publish, draft], default value: publish",
                        "name": "State",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":[],\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/category": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Delete Category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category name, limit up to 50 characters",
                        "name": "Name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":[],\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/tags": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Get Tags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page number, default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit how much results returned per page, default 20",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":[],\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Add Tag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag state, 0: disable, 1:enable, default 1",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tag name, max length 20 characters",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":[],\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Delete Tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category Id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":[],\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/tags/": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Get Tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category Id,",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":[],\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Update Tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category Id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Category name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Category state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":[],\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Get Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User identifier, such as username, email, phone, or uid return by website supported oauth2.0",
                        "name": "identifier",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Credential, if user sign in website inside (identifier_from is 0), credential is password, otherwise it's access token",
                        "name": "credential",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "IdentityType, such as username, email, phone, github, weibo, wechat...",
                        "name": "identity_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "IdentifierFrom, range is 0 to 1,  0 means website inside, 1 is outside",
                        "name": "identifier_from",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":[],\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Fresh Man Register",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User identifier, such as username, email, phone, or uid return by website supported oauth2.0",
                        "name": "identifier",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Credential, if user sign in website inside (identifier_from is 0), credential is password, otherwise it's access token",
                        "name": "credential",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "IdentityType, such as username, email, phone, github, weibo, wechat...",
                        "name": "identity_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "IdentifierFrom, range is 0 to 1,  0 means website inside, 1 is outside",
                        "name": "identifier_from",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"code\":200,\"data\":[],\"msg\":\"ok\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
